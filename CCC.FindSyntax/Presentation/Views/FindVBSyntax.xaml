<vncmvvm:ViewBase
    x:Class="CCC.FindSyntax.Presentation.Views.FindVBSyntax"
    x:Name="thisFindVBSyntax"    
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:prism="http://www.codeplex.com/prism"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    
    xmlns:cb="clr-namespace:CalcBinding;assembly=CalcBinding" 
    
    xmlns:dx="http://schemas.devexpress.com/winfx/2008/xaml/core" 
    xmlns:dxb="http://schemas.devexpress.com/winfx/2008/xaml/bars"     
    xmlns:dxe="http://schemas.devexpress.com/winfx/2008/xaml/editors"
    xmlns:dxdb="http://schemas.devexpress.com/winfx/2008/xaml/demobase"
    xmlns:dxdo="http://schemas.devexpress.com/winfx/2008/xaml/docking"  
    xmlns:dxlc="http://schemas.devexpress.com/winfx/2008/xaml/layoutcontrol"
    xmlns:dxg="http://schemas.devexpress.com/winfx/2008/xaml/grid"
    
    xmlns:vncmvvm="clr-namespace:VNC.Core.Mvvm;assembly=VNC.Core"
    xmlns:local="clr-namespace:CCC.FindSyntax.Presentation.Views"
    
    xmlns:views="clr-namespace:CCC.FindSyntax.Presentation.Views"
    xmlns:viewModels="clr-namespace:CCC.FindSyntax.Presentation.ViewModels"
    
    xmlns:core="clr-namespace:VNCCodeCommandConsole.Core;assembly=VNCCodeCommandConsole.Core"
    prism:ViewModelLocator.AutoWireViewModel="True"
    
    mc:Ignorable="d"
    d:DesignStyle="{StaticResource vncDesignStyle}"
>
    <!--xmlns:core="clr-namespace:VNCCodeCommandConsole.Core;assembly=VNCCodeCommandConsole.Core"-->
    <UserControl.Resources>
        <Style x:Key="reStatementWalker" TargetType="views:RegExSyntaxWalker">
            <Setter Property="VerticalAlignment" Value="Top" />
            <Setter Property="Background" Value="Lavender" />
        </Style>

        <Style x:Key="reBlockStatementWalker" TargetType="views:RegExBlockSyntaxWalker">
            <Setter Property="VerticalAlignment" Value="Top" />
            <Setter Property="Background" Value="#FFE8FAE6" />
        </Style>
    </UserControl.Resources>
    
    <!-- NOTE(crhodes)
     Put in LayoutControl to get vertical scrolling
    -->
    <dxlc:LayoutControl Orientation="Vertical" MinWidth="300">

        <!-- NOTE(crhodes)
         This is for debugging
        -->
        <dxlc:LayoutItem>
            <dxe:CheckEdit x:Name="ceCollapse" Content="Collapsed Headers"
            	IsChecked="True"
                EditValueChanged="ceCollapse_EditValueChanged"/>
        </dxlc:LayoutItem>    
        
        <dxlc:LayoutItem Label="CommandParameter" LabelPosition="Top">
            <dxe:TextEdit 
            Text="{Binding Message}" TextWrapping="Wrap">
            </dxe:TextEdit>
        </dxlc:LayoutItem>
        
        <views:RegExSyntaxWalker x:Name="cImportsStatement"
                Style="{StaticResource reStatementWalker}"
                ControlHeader="{Binding ImportsStatementWalker.ControlHeader, Mode=TwoWay}"
                ButtonContent="{Binding ImportsStatementWalker.ButtonContent, Mode=TwoWay}"
                CommandParameter="{Binding ImportsStatementWalker.CommandParameter, Mode=TwoWay}"
                RegExLabel="{Binding ImportsStatementWalker.RegExLabel, Mode=TwoWay}"  
                RegEx="{Binding ImportsStatementWalker.RegEx, Mode=TwoWay}"
                UseRegEx="{Binding ImportsStatementWalker.UseRegEx, Mode=TwoWay}"/>

        <views:RegExSyntaxWalker x:Name="cNamespaceStatementWalker" 
                Style="{StaticResource reStatementWalker}"
                ControlHeader="{Binding NamespaceStatementWalker.ControlHeader, Mode=TwoWay}"                           
                ButtonContent="{Binding NamespaceStatementWalker.ButtonContent, Mode=TwoWay}"
                CommandParameter="{Binding NamespaceStatementWalker.CommandParameter, Mode=TwoWay}"
                RegExLabel="{Binding NamespaceStatementWalker.RegExLabel, Mode=TwoWay}"                                 
                RegEx="{Binding NamespaceStatementWalker.RegEx, Mode=TwoWay}"
                UseRegEx="{Binding NamespaceStatementWalker.UseRegEx, Mode=TwoWay}"/>

        <views:RegExBlockSyntaxWalker x:Name="cClassStatementWalker" 
                Style="{StaticResource reBlockStatementWalker}"
                ControlHeader="{Binding ClassStatementWalker.ControlHeader, Mode=TwoWay}"
                ButtonContent="{Binding ClassStatementWalker.ButtonContent, Mode=TwoWay}"
                CommandParameter="{Binding ClassStatementWalker.CommandParameter, Mode=TwoWay}"
                RegExLabel="{Binding ClassStatementWalker.RegExLabel, Mode=TwoWay}"                                 
                RegEx="{Binding ClassStatementWalker.RegEx, Mode=TwoWay}"
                UseRegEx="{Binding ClassStatementWalker.UseRegEx, Mode=TwoWay}"
                DisplayBlock="{Binding ClassStatementWalker.DisplayBlock, Mode=TwoWay}"
                DisplayBlockLabel="{Binding ClassStatementWalker.DisplayBlockLabel, Mode=TwoWay}" />

        <views:RegExBlockSyntaxWalker x:Name="cModuleStatement" 
                Style="{StaticResource reBlockStatementWalker}" 
                ControlHeader="{Binding ModuleStatementWalker.ControlHeader, Mode=TwoWay}"                                   
                ButtonContent="{Binding ModuleStatementWalker.ButtonContent, Mode=TwoWay}"
                CommandParameter="{Binding ModuleStatementWalker.CommandParameter, Mode=TwoWay}"
                RegExLabel="{Binding ModuleStatementWalker.RegExLabel, Mode=TwoWay}"                                       
                RegEx="{Binding ModuleStatementWalker.RegEx, Mode=TwoWay}"
                UseRegEx="{Binding ModuleStatementWalker.UseRegEx, Mode=TwoWay}" 
			    DisplayBlock="{Binding ModuleStatementWalker.DisplayBlock, Mode=TwoWay}"
			    DisplayBlockLabel="{Binding ModuleStatementWalker.DisplayBlockLabel, Mode=TwoWay}" />
        
        <!-- TODO(crhodes)
         Handle this
        -->
        <dxlc:LayoutGroup Header="Find FieldDeclaration Syntax" 
        	View="GroupBox"
            Orientation="Vertical"
            IsCollapsible="True" IsCollapsed="True">

            <dxlc:LayoutGroup
            	Orientation="Horizontal">

                <dxlc:LayoutGroup
                	Orientation="Vertical">
                    <dxlc:LayoutItem>
                        <dxe:CheckEdit Content="Use Regular Expressions"
                                       IsChecked="False"/>
                    </dxlc:LayoutItem>

                    <dxlc:LayoutItem Label="Fields">
                        <dxe:TextEdit Text=".*"
                                      IsEnabled="{cb:Binding ElementName=ceFieldDeclarationUseRegEx, Path=IsChecked, Mode=OneWay}"
                                      ToolTip="Supports Regular Expressions"/>
                    </dxlc:LayoutItem>

                    <dx:GroupFrame Header="FieldDeclaration Location" VerticalAlignment="Top">
                        <dxe:ListBoxEdit Name="lbeFieldDeclarationLocation" 
                             ValueMember="Content" 
                             SelectedIndex="0"                                                         
                             ShowBorder="False" Background="{x:Null}">
                            <dxe:ListBoxEdit.StyleSettings>
                                <dxe:RadioListBoxEditStyleSettings />
                            </dxe:ListBoxEdit.StyleSettings>
                            <dxe:ListBoxEdit.ItemsPanel>
                                <ItemsPanelTemplate>
                                    <StackPanel Orientation="Vertical" />
                                </ItemsPanelTemplate>
                            </dxe:ListBoxEdit.ItemsPanel>
                            <dxe:ListBoxEdit.Items>
                                <dxe:ListBoxEditItem Content="Class" />
                                <dxe:ListBoxEditItem Content="Module" />
                                <dxe:ListBoxEditItem Content="Structure" />
                            </dxe:ListBoxEdit.Items>
                        </dxe:ListBoxEdit>
                    </dx:GroupFrame>
                </dxlc:LayoutGroup>

            </dxlc:LayoutGroup>

            <dxlc:LayoutItem>
                <Button Content="FieldDeclaration Walker" 
                        Style="{StaticResource SyntaxQueryButton}"
                        Command="{Binding FieldDeclarationWalkerCommand}" 
                        Tag="FieldDeclarationWalker" />
            </dxlc:LayoutItem>

        </dxlc:LayoutGroup>

        <views:RegExBlockSyntaxWalker x:Name="cPropertyStatement" 
                Style="{StaticResource reBlockStatementWalker}" 
                ControlHeader="{Binding PropertyStatementWalker.ControlHeader, Mode=TwoWay}"
                ButtonContent="{Binding PropertyStatementWalker.ButtonContent, Mode=TwoWay}"
                CommandParameter="{Binding PropertyStatementWalker.CommandParameter, Mode=TwoWay}"
                RegExLabel="{Binding PropertyStatementWalker.RegExLabel, Mode=TwoWay}"                                       
                RegEx="{Binding PropertyStatementWalker.RegEx, Mode=TwoWay}"
                UseRegEx="{Binding PropertyStatementWalker.UseRegEx, Mode=TwoWay}" 
        		DisplayBlock="{Binding PropertyStatementWalker.DisplayBlock, Mode=TwoWay}"
        		DisplayBlockLabel="{Binding PropertyStatementWalker.DisplayBlockLabel, Mode=TwoWay}" />

        <views:RegExBlockSyntaxWalker x:Name="cMethodStatementWalker" 
                Style="{StaticResource reBlockStatementWalker}" 
                ControlHeader="{Binding MethodStatementWalker.ControlHeader, Mode=TwoWay}"
                ButtonContent="{Binding MethodStatementWalker.ButtonContent, Mode=TwoWay}"
                CommandParameter="{Binding MethodStatementWalker.CommandParameter, Mode=TwoWay}"
                RegExLabel="{Binding MethodStatementWalker.RegExLabel, Mode=TwoWay}"                                       
                RegEx="{Binding MethodStatementWalker.RegEx, Mode=TwoWay}"
                UseRegEx="{Binding MethodStatementWalker.UseRegEx, Mode=TwoWay}"
                DisplayBlock="{Binding MethodStatementWalker.DisplayBlock, Mode=TwoWay}"
                DisplayBlockLabel="{Binding MethodStatementWalker.DisplayBlockLabel, Mode=TwoWay}" />

        
        <!-- TODO(crhodes)
         Handle this
        -->
        <dxlc:LayoutGroup Header="Find StructureBlock Syntax" 
        	View="GroupBox" Orientation="Vertical"
            IsCollapsible="True" IsCollapsed="True"                          >

            <dxlc:LayoutGroup
            	Orientation="Horizontal">

                <dxlc:LayoutGroup
                	Orientation="Vertical">
                    <dxlc:LayoutItem>
                        <dxe:CheckEdit Content="Use Regular Expressions"
                                       IsChecked="False" />
                    </dxlc:LayoutItem>

                    <dxlc:LayoutItem Label="Structures">
                        <dxe:TextEdit Text=".*"
                                      IsEnabled="{cb:Binding ElementName=ceStructuresUseRegEx, Path=IsChecked, Mode=OneWay}"
                                      ToolTip="Supports Regular Expressions"/>
                    </dxlc:LayoutItem>

                    <dxlc:LayoutItem>
                        <dxe:CheckEdit x:Name="ceStructureShowFields" 
                                   Content="ShowFields" 
                                   IsChecked="True"/>
                    </dxlc:LayoutItem>

                    <dxlc:LayoutGroup
                    	Orientation="Vertical"
                        Visibility="{cb:Binding ElementName=ceStructureShowFields, Path=IsChecked}" >

                        <dxlc:LayoutItem>
                            <dxe:CheckEdit Content="Use Regular Expressions"
                                       IsChecked="False" />
                        </dxlc:LayoutItem>

                        <dxlc:LayoutItem Label="Fields" >
                            <dxe:TextEdit Text=".*" 
                                    IsEnabled="{cb:Binding ElementName=ceStructureFieldsUseRegEx, Path=IsChecked, Mode=OneWay}"
                                    ToolTip="Supports Regular Expressions"/>
                        </dxlc:LayoutItem>

                    </dxlc:LayoutGroup>

                </dxlc:LayoutGroup>

            </dxlc:LayoutGroup>

            <dxlc:LayoutItem>
                <Button Content="FindStructureBlock Walker" 
                        Style="{StaticResource SyntaxQueryButton}"
                        Command="{Binding FindStructureBlockWalkerCommand}" 
                        Tag="FindStructureBlockWalker" />
            </dxlc:LayoutItem>

        </dxlc:LayoutGroup>

        <views:RegExSyntaxWalker x:Name="cHandlesClause" 
                Style="{StaticResource reStatementWalker}" 
                ControlHeader="{Binding HandlesClauseWalker.ControlHeader, Mode=TwoWay}"
                ButtonContent="{Binding HandlesClauseWalker.ButtonContent, Mode=TwoWay}"
                CommandParameter="{Binding HandlesClauseWalker.CommandParameter, Mode=TwoWay}"
                RegExLabel="{Binding HandlesClauseWalker.RegExLabel, Mode=TwoWay}"                                  
                RegEx="{Binding HandlesClauseWalker.RegEx, Mode=TwoWay}"
                UseRegEx="{Binding HandlesClauseWalker.UseRegEx, Mode=TwoWay}"/>

        <views:RegExSyntaxWalker x:Name="cParameterList" 
                Style="{StaticResource reStatementWalker}" 
                ControlHeader="{Binding ParameterListWalker.ControlHeader, Mode=TwoWay}"
                ButtonContent="{Binding ParameterListWalker.ButtonContent, Mode=TwoWay}"
                CommandParameter="{Binding ParameterListWalker.CommandParameter, Mode=TwoWay}"
                RegExLabel="{Binding ParameterListWalker.RegExLabel, Mode=TwoWay}"                                  
                RegEx="{Binding ParameterListWalker.RegEx, Mode=TwoWay}"
                UseRegEx="{Binding ParameterListWalker.UseRegEx, Mode=TwoWay}"/>

        <views:RegExSyntaxWalker x:Name="cLocalDeclarationStatementWalker" 
                Style="{StaticResource reStatementWalker}" 
                ControlHeader="{Binding LocalDeclarationStatementWalker.ControlHeader, Mode=TwoWay}"
                ButtonContent="{Binding LocalDeclarationStatementWalker.ButtonContent, Mode=TwoWay}"
                CommandParameter="{Binding LocalDeclarationStatementWalker.CommandParameter, Mode=TwoWay}"
                RegExLabel="{Binding LocalDeclarationStatementWalker.RegExLabel, Mode=TwoWay}"                                  
                RegEx="{Binding LocalDeclarationStatementWalker.RegEx, Mode=TwoWay}"
                UseRegEx="{Binding LocalDeclarationStatementWalker.UseRegEx, Mode=TwoWay}"/>

        <views:RegExSyntaxWalker x:Name="cMultiLineLambdaExpressionWalker" 
                Style="{StaticResource reStatementWalker}" 
                ControlHeader="{Binding MultiLineLambdaExpressionWalker.ControlHeader, Mode=TwoWay}"
                ButtonContent="{Binding MultiLineLambdaExpressionWalker.ButtonContent, Mode=TwoWay}"
                CommandParameter="{Binding MultiLineLambdaExpressionWalker.CommandParameter, Mode=TwoWay}"
                RegExLabel="{Binding MultiLineLambdaExpressionWalker.RegExLabel, Mode=TwoWay}" 
                RegEx="{Binding MultiLineLambdaExpressionWalker.RegEx, Mode=TwoWay}"
                UseRegEx="{Binding MultiLineLambdaExpressionWalker.UseRegEx, Mode=TwoWay}"/>

        <views:RegExSyntaxWalker x:Name="cSingleLineLambdaExpressionWalker" 
                Style="{StaticResource reStatementWalker}" 
                ControlHeader="{Binding SingleLineLambdaExpressionWalker.ControlHeader, Mode=TwoWay}"
                ButtonContent="{Binding SingleLineLambdaExpressionWalker.ButtonContent, Mode=TwoWay}"
                CommandParameter="{Binding SingleLineLambdaExpressionWalker.CommandParameter, Mode=TwoWay}"
                RegExLabel="{Binding SingleLineLambdaExpressionWalker.RegExLabel, Mode=TwoWay}" 
                RegEx="{Binding SingleLineLambdaExpressionWalker.RegEx, Mode=TwoWay}"
                UseRegEx="{Binding SingleLineLambdaExpressionWalker.UseRegEx, Mode=TwoWay}"/>

        <views:RegExSyntaxWalker x:Name="cExpressionStatement" 
                Style="{StaticResource reStatementWalker}" 
                ControlHeader="{Binding ExpressionStatementWalker.ControlHeader, Mode=TwoWay}"
                ButtonContent="{Binding ExpressionStatementWalker.ButtonContent, Mode=TwoWay}"
                CommandParameter="{Binding ExpressionStatementWalker.CommandParameter, Mode=TwoWay}"
                RegExLabel="{Binding ExpressionStatementWalker.RegExLabel, Mode=TwoWay}" 
                RegEx="{Binding ExpressionStatementWalker.RegEx, Mode=TwoWay}"
                UseRegEx="{Binding ExpressionStatementWalker.UseRegEx, Mode=TwoWay}"/>

        <views:RegExSyntaxWalker x:Name="cInvocationExpression" 
                Style="{StaticResource reStatementWalker}" 
                ControlHeader="{Binding InvocationExpressionWalker.ControlHeader, Mode=TwoWay}"
                ButtonContent="{Binding InvocationExpressionWalker.ButtonContent, Mode=TwoWay}"
                CommandParameter="{Binding InvocationExpressionWalker.CommandParameter, Mode=TwoWay}"
                RegExLabel="{Binding InvocationExpressionWalker.RegExLabel, Mode=TwoWay}" 
                RegEx="{Binding InvocationExpressionWalker.RegEx, Mode=TwoWay}"
                UseRegEx="{Binding InvocationExpressionWalker.UseRegEx, Mode=TwoWay}"/>

        <views:RegExSyntaxWalker x:Name="cMemberAccessExpression" 
                Style="{StaticResource reStatementWalker}" 
                ControlHeader="{Binding MemberAccessExpressionWalker.ControlHeader, Mode=TwoWay}"
                ButtonContent="{Binding MemberAccessExpressionWalker.ButtonContent, Mode=TwoWay}"
                CommandParameter="{Binding MemberAccessExpressionWalker.CommandParameter, Mode=TwoWay}"
                RegExLabel="{Binding MemberAccessExpressionWalker.RegExLabel, Mode=TwoWay}" 
                RegEx="{Binding MemberAccessExpressionWalker.RegEx, Mode=TwoWay}"
                UseRegEx="{Binding MemberAccessExpressionWalker.UseRegEx, Mode=TwoWay}"/>
        
        <views:RegExSyntaxWalker x:Name="cArgumentList" 
                Style="{StaticResource reStatementWalker}" 
                ControlHeader="{Binding ArgumentListWalker.ControlHeader, Mode=TwoWay}"
                ButtonContent="{Binding ArgumentListWalker.ButtonContent, Mode=TwoWay}"
                CommandParameter="{Binding ArgumentListWalker.CommandParameter, Mode=TwoWay}"
                RegExLabel="{Binding ArgumentListWalker.RegExLabel, Mode=TwoWay}" 
                RegEx="{Binding ArgumentListWalker.RegEx, Mode=TwoWay}"
                UseRegEx="{Binding ArgumentListWalker.UseRegEx, Mode=TwoWay}"/>
        
        <views:RegExSyntaxWalker x:Name="cVariableDeclarator" 
                Style="{StaticResource reStatementWalker}" 
                ControlHeader="{Binding VariableDeclaratorWalker.ControlHeader, Mode=TwoWay}"
                ButtonContent="{Binding VariableDeclaratorWalker.ButtonContent, Mode=TwoWay}"
                CommandParameter="{Binding VariableDeclaratorWalker.CommandParameter, Mode=TwoWay}"
                RegExLabel="{Binding VariableDeclaratorWalker.RegExLabel, Mode=TwoWay}" 
                RegEx="{Binding VariableDeclaratorWalker.RegEx, Mode=TwoWay}"
                UseRegEx="{Binding VariableDeclaratorWalker.UseRegEx, Mode=TwoWay}"/>

        <views:RegExSyntaxWalker x:Name="cObjectCreationExpressionWalker" 
                Style="{StaticResource reStatementWalker}" 
                ControlHeader="{Binding ObjectCreationExpressionWalker.ControlHeader, Mode=TwoWay}"
                ButtonContent="{Binding ObjectCreationExpressionWalker.ButtonContent, Mode=TwoWay}"
                CommandParameter="{Binding ObjectCreationExpressionWalker.CommandParameter, Mode=TwoWay}"
                RegExLabel="{Binding ObjectCreationExpressionWalker.RegExLabel, Mode=TwoWay}" 
                RegEx="{Binding ObjectCreationExpressionWalker.RegEx, Mode=TwoWay}"
                UseRegEx="{Binding ObjectCreationExpressionWalker.UseRegEx, Mode=TwoWay}"/>

        <!-- TODO(crhodes)
         Handle THis
        -->
        <dxlc:LayoutGroup Header="Find AssignmentStatement Syntax" 
        	View="GroupBox" Orientation="Vertical"
            IsCollapsible="True" IsCollapsed="True">

            <dxlc:LayoutGroup
            	Orientation="Horizontal">

                <dxlc:LayoutGroup
                	Orientation="Vertical">
                    <dxlc:LayoutItem>
                        <dxe:CheckEdit Content="Use Regular Expressions"
                                       IsChecked="False"/>
                    </dxlc:LayoutItem>

                    <dxlc:LayoutGroup
                    	Orientation="Horizontal">
                        <dxlc:LayoutItem>
                            <dxe:CheckEdit Content="Match Left Side"
                                       IsChecked="True"/>
                        </dxlc:LayoutItem>
                        <dxlc:LayoutItem>
                            <dxe:CheckEdit x:Name="ceAssignmentStatementMatchRight" Content="Match Right Side"
                                       IsChecked="True"/>
                        </dxlc:LayoutItem>
                    </dxlc:LayoutGroup>

                    <dxlc:LayoutItem Label="Assignments">
                        <dxe:TextEdit Text=".*"
                                      IsEnabled="{cb:Binding ElementName=ceAssignmentStatementUseRegEx, Path=IsChecked, Mode=OneWay}"
                                      ToolTip="Supports Regular Expressions"/>
                    </dxlc:LayoutItem>

                </dxlc:LayoutGroup>

            </dxlc:LayoutGroup>

            <dxlc:LayoutItem>
                <Button Content="AssignmentStatement Walker" 
                        Style="{StaticResource SyntaxQueryButton}"
                        Command="{Binding AssignmentStatementWalkerCommand}" 
                        Tag="AssignmentStatementWalker" />
            </dxlc:LayoutItem>

        </dxlc:LayoutGroup>

        <views:RegExSyntaxWalker x:Name="cBinaryExpression" 
                Style="{StaticResource reStatementWalker}" 
                ControlHeader="{Binding BinaryExpressionWalker.ControlHeader, Mode=TwoWay}"
                ButtonContent="{Binding BinaryExpressionWalker.ButtonContent, Mode=TwoWay}"
                CommandParameter="{Binding BinaryExpressionWalker.CommandParameter, Mode=TwoWay}"
                RegExLabel="{Binding BinaryExpressionWalker.RegExLabel, Mode=TwoWay}" 
                RegEx="{Binding BinaryExpressionWalker.RegEx, Mode=TwoWay}"
                UseRegEx="{Binding BinaryExpressionWalker.UseRegEx, Mode=TwoWay}"/>
        
        <views:RegExSyntaxWalker x:Name="cAsNewClause" 
                Style="{StaticResource reStatementWalker}" 
                ControlHeader="{Binding AsNewClauseWalker.ControlHeader, Mode=TwoWay}"
                ButtonContent="{Binding AsNewClauseWalker.ButtonContent, Mode=TwoWay}"
                CommandParameter="{Binding AsNewClauseWalker.CommandParameter, Mode=TwoWay}"
                RegExLabel="{Binding AsNewClauseWalker.RegExLabel, Mode=TwoWay}" 
                RegEx="{Binding AsNewClauseWalker.RegEx, Mode=TwoWay}"
                UseRegEx="{Binding AsNewClauseWalker.UseRegEx, Mode=TwoWay}"/>
        
        <views:RegExSyntaxWalker x:Name="cSimpleAsClause" 
                Style="{StaticResource reStatementWalker}" 
                ControlHeader="{Binding SimpleAsClauseWalker.ControlHeader, Mode=TwoWay}"
                ButtonContent="{Binding SimpleAsClauseWalker.ButtonContent, Mode=TwoWay}"
                CommandParameter="{Binding SimpleAsClauseWalker.CommandParameter, Mode=TwoWay}"
                RegExLabel="{Binding SimpleAsClauseWalker.RegExLabel, Mode=TwoWay}" 
                RegEx="{Binding SimpleAsClauseWalker.RegEx, Mode=TwoWay}"
                UseRegEx="{Binding SimpleAsClauseWalker.UseRegEx, Mode=TwoWay}"/>

        <!-- TODO(crhodes)
         Handle this
        -->
        <dxlc:LayoutGroup Header="Find StopOrEndStatement Syntax" 
        	View="GroupBox" Orientation="Vertical"
            IsCollapsible="True" IsCollapsed="True">

            <dxlc:LayoutItem>
                <Button Content="StopOrEndStatement Walker" 
                        Style="{StaticResource SyntaxQueryButton}"
                        Command="{Binding StopOrEndStatementWalkerCommand}" 
                        CommandParameter="StopOrEndStatementWalker" />
            </dxlc:LayoutItem>

        </dxlc:LayoutGroup>

        <!--These seem redundant with SyntaxWalker UI-->
        
        <!--<views:RegExSyntaxWalker x:Name="cSyntaxNode" 
                Style="{StaticResource reStatementWalker}" 
                ControlHeader="{Binding SyntaxNodeWalker.ControlHeader, Mode=TwoWay}"
                ButtonContent="{Binding SyntaxNodeWalker.ButtonContent, Mode=TwoWay}"
                CommandParameter="{Binding SyntaxNodeWalker.CommandParameter, Mode=TwoWay}"
                RegExLabel="{Binding SyntaxNodeWalker.RegExLabel, Mode=TwoWay}" 
                RegEx="{Binding SyntaxNodeWalker.RegEx, Mode=TwoWay}"
                UseRegEx="{Binding SyntaxNodeWalker.UseRegEx, Mode=TwoWay}"/>

        <views:RegExSyntaxWalker x:Name="cSyntaxToken" 
                Style="{StaticResource reStatementWalker}" 
                ControlHeader="{Binding SyntaxTokenWalker.ControlHeader, Mode=TwoWay}"
                ButtonContent="{Binding SyntaxTokenWalker.ButtonContent, Mode=TwoWay}"
                CommandParameter="{Binding SyntaxTokenWalker.CommandParameter, Mode=TwoWay}"
                RegExLabel="{Binding SyntaxTokesWalker.RegExLabel, Mode=TwoWay}" 
                RegEx="{Binding SyntaxTokenWalker.RegEx, Mode=TwoWay}"
                UseRegEx="{Binding SyntaxTokenWalker.UseRegEx, Mode=TwoWay}"/>

        <views:RegExSyntaxWalker x:Name="cSyntaxTrivia" 
                    Style="{StaticResource reStatementWalker}" 
                    ControlHeader="{Binding SyntaxTriviaWalker.ControlHeader, Mode=TwoWay}"
                    ButtonContent="{Binding SyntaxTriviaWalker.ButtonContent, Mode=TwoWay}"
                    CommandParameter="{Binding SyntaxTriviaWalker.CommandParameter, Mode=TwoWay}"
                    RegExLabel="{Binding SyntaxTriviaWalker.RegExLabel, Mode=TwoWay}" 
                    RegEx="{Binding SyntaxTriviaWalker.RegEx, Mode=TwoWay}"
                    UseRegEx="{Binding SyntaxTriviaWalker.UseRegEx, Mode=TwoWay}"/>-->

    </dxlc:LayoutControl>

        <!--<StackPanel Grid.Row="2" Orientation="Horizontal" >
            <StackPanel Orientation="Horizontal" Margin="5">
                <Label Content="V:" />
                <Label Content="{Binding ElementName=thisFindVBSyntax, Path=InstanceCountV}" />
            </StackPanel>
            <StackPanel Orientation="Horizontal" Margin="5">
                <Label Content="VM:" />
                <Label Content="{Binding InstanceCountVM}" />
            </StackPanel>
        </StackPanel>-->
    
</vncmvvm:ViewBase>